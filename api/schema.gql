type User {
  username: String!
  license: String!
  name: String!
}

input LoginInput {
  username: String!
  password: String!
}

type Job {
  number: String!
  description: String!
  personResponsible: String!
}

type Resource {
  number: String!
  name: String!
}

type PigActivity {
  jobs: [Job!]!
  defaultJob: Job
  defaultPrice: Float
}

input PigAdjustmentInput {
  animal: String!
  job: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigGradeOffInput {
  animal: String!
  job: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigMortalityInput {
  animal: String!
  job: String!
  naturalQuantity: Int!
  euthanizedQuantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigMoveInput {
  fromAnimal: String!
  toAnimal: String!
  fromJob: String!
  toJob: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigPurchaseInput {
  animal: String!
  job: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigWeanInput {
  animal: String!
  job: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

type FarrowingBackendScorecard {
  areas: [Job!]!
  operators: [Resource!]!
}

input ScorecardEntry {
  score: Int!
  comments: String
}

input SetAreaOperatorInput {
  area: String!
  operator: String!
}

input FarrowingBackendScorecardInput {
  area: String!
  operator: String!
  sows: ScorecardEntry!
  piglets: ScorecardEntry!
  feed: ScorecardEntry!
  water: ScorecardEntry!
  crate: ScorecardEntry!
  room: ScorecardEntry!
}

type Query {
  user: User
  pigActivity: PigActivity!
  farrowingBackendScorecard: FarrowingBackendScorecard!
}

type Mutation {
  login(input: LoginInput!): User!
  logout: Boolean!
  postPigAdjustment(input: PigAdjustmentInput!): PigActivity!
  postPigGradeOff(input: PigGradeOffInput!): PigActivity!
  postPigMortality(input: PigMortalityInput!): PigActivity!
  postPigMove(input: PigMoveInput!): PigActivity!
  postPigPurchase(input: PigPurchaseInput!): PigActivity!
  postPigWean(input: PigWeanInput!): PigActivity!
  postFarrowingBackendScorecard(input: FarrowingBackendScorecardInput!): Boolean!
  setAreaOperator(input: SetAreaOperatorInput!): FarrowingBackendScorecard!
}