scalar Date

type User {
  id: ID!
  username: String!
  domain: String!
  license: String!
  name: String!
}

type Defaults {
  pigJob: String
  scorecardJob: String
  price: Float
}

type Job {
  number: String!
  site: String!
  dimensions: JobDimensions!
}

type JobDimensions {
  costCenter: String
  entity: String
}

input LoginInput {
  username: String!
  password: String!
}

input DefaultsInput {
  pigJob: String
  scorecardJob: String
  price: Float
}

input JobSearchInput {
  status: [String!]
  postingGroup: [String!]
}

input PostItemJournalInput {
  template: String!
  batch: String!
  date: Date!
  entryType: String!
  document: String!
  item: String!
  description: String
  location: String!
  quantity: Float!
  amount: Float!
  weight: Float!
  job: String!
  prodPostingGroup: String
  costCenterCode: String
  entityType: String
}

input PostJobJournalInput {
  template: String!
  batch: String!
  date: Date!
  document: String!
  job: String!
  location: String!
  task: String!
  number: String!
  workType: String!
  quantity: Float!
  unitPrice: Float!
  description: String
}

type Query {
  user: User
  defaults: Defaults!
  jobs(input: JobSearchInput): [Job!]!
}

type Mutation {
  login(input: LoginInput!): User!
  logout: Boolean!
  updateDefaults(input: DefaultsInput!): Defaults!
  postItemJournal(input: PostItemJournalInput!): Boolean!
  postJobJournal(input: PostJobJournalInput!): Boolean!
}