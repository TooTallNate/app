type User {
  username: String!
  license: String!
  name: String!
}

type Job {
  number: String!
  description: String!
  personResponsible: Resource!
}

type Resource {
  number: String!
  name: String!
}

type PigActivityDefaults {
  job: Job
  price: Float
}

type ScorecardEntry {
  score: Int
  comments: String
}

type FarrowingBackendScorecard {
  area: Job!
  operator: Resource
  sows: ScorecardEntry!
  piglets: ScorecardEntry!
  feed: ScorecardEntry!
  water: ScorecardEntry!
  crate: ScorecardEntry!
  room: ScorecardEntry!
}


input LoginInput {
  username: String!
  password: String!
}

input PigAdjustmentInput {
  animal: String!
  job: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigGradeOffInput {
  animal: String!
  job: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigMortalityInput {
  animal: String!
  job: String!
  naturalQuantity: Int!
  euthanizedQuantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigMoveInput {
  fromAnimal: String!
  toAnimal: String!
  fromJob: String!
  toJob: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigPurchaseInput {
  animal: String!
  job: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input PigWeanInput {
  animal: String!
  job: String!
  quantity: Int!
  weight: Float!
  price: Float!
  comments: String
}

input ScorecardEntryInput {
  score: Int!
  comments: String
}

input SetAreaOperatorInput {
  area: String!
  operator: String!
}

input PostFarrowingBackendScorecardInput {
  area: String!
  operator: String!
  sows: ScorecardEntryInput!
  piglets: ScorecardEntryInput!
  feed: ScorecardEntryInput!
  water: ScorecardEntryInput!
  crate: ScorecardEntryInput!
  room: ScorecardEntryInput!
}

input SaveFarrowingBackendScorecardInput {
  area: String!
  operator: String
  sows: ScorecardEntryInput
  piglets: ScorecardEntryInput
  feed: ScorecardEntryInput
  water: ScorecardEntryInput
  crate: ScorecardEntryInput
  room: ScorecardEntryInput
}


type LoginResult {
  success: Boolean!
  user: User!
}

type LogoutResult {
  success: Boolean!
}

type PostPigActivityResult {
  success: Boolean!
  defaults: PigActivityDefaults!
}

type PostFarrowingBackendScorecardResult {
  success: Boolean!
  scorecard: FarrowingBackendScorecard!
}

type SaveFarrowingBackendScorecardResult {
  success: Boolean!
  scorecard: FarrowingBackendScorecard!
}

type SetAreaOperatorResult {
  success: Boolean!
  area: Job!
}


type Query {
  user: User
  pigActivityJobs: [Job!]!
  pigActivityDefaults: PigActivityDefaults!
  farrowingBackendScorecard(area: String!): FarrowingBackendScorecard
  farrowingBackendAreas: [Job!]!
  farrowingBackendArea(number: String!): Job
  farrowingBackendOperators: [Resource!]!
}

type Mutation {
  login(input: LoginInput!): LoginResult!
  logout: LogoutResult!
  postPigAdjustment(input: PigAdjustmentInput!): PostPigActivityResult!
  postPigGradeOff(input: PigGradeOffInput!): PostPigActivityResult!
  postPigMortality(input: PigMortalityInput!): PostPigActivityResult!
  postPigMove(input: PigMoveInput!): PostPigActivityResult!
  postPigPurchase(input: PigPurchaseInput!): PostPigActivityResult!
  postPigWean(input: PigWeanInput!): PostPigActivityResult!
  postFarrowingBackendScorecard(input: PostFarrowingBackendScorecardInput!): PostFarrowingBackendScorecardResult!
  saveFarrowingBackendScorecard(input: SaveFarrowingBackendScorecardInput!): SaveFarrowingBackendScorecardResult!
  setAreaOperator(input: SetAreaOperatorInput!): SetAreaOperatorResult!
}