type UserLocations {
  mode: InclusivityMode!
  list: [Location!]!
}

type MenuOption {
  name: String!
  route: String!
}

type UserMenuOptions {
  mode: InclusivityMode!
  list: [MenuOption!]!
}

type User {
  username: String!
  license: String!
  name: String!
  locations: UserLocations!
  menuOptions: UserMenuOptions!
}

input LoginInput {
  username: String!
  password: String!
}

type LoginResult {
  success: Boolean!
  user: User!
}

type LogoutResult {
  success: Boolean!
}

input UpdateUserLocationsInput {
  add: [String!]
  remove: [String!]
  mode: InclusivityMode
}

input UpdateUserMenuOptionsInput {
  add: [String!]
  remove: [String!]
  mode: InclusivityMode
}

type UpdateUserLocationsResult {
  success: Boolean!
  locations: UserLocations!
}

type UpdateUserMenuOptionsResult {
  success: Boolean!
  menuOptions: UserMenuOptions!
}

type Query {
  user: User
  users: [User!]!
  locations: [Location!]!
  menuOptions: [MenuOption!]
}

type Mutation {
  login(input: LoginInput!): LoginResult!
  logout: LogoutResult!
  updateUserMenuOptions(input: UpdateUserMenuOptionsInput!): UpdateUserMenuOptionsResult!
  updateUserLocations(input: UpdateUserLocationsInput!): UpdateUserLocationsResult!
}
