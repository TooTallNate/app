type PigActivityDefaults {
  job: Job
  prices: [PriceEntry!]!
}

type PigWeanEvent {
  code: String!
  description: String!
}

type PigGradeOffEvent {
  code: String!
  description: String!
  reasons: [Reason!]!
}

type PigMoveEvent {
  code: String!
  description: String!
}

type PigPurchaseEvent {
  code: String!
  description: String!
}

type PigAdjustmentEvent {
  code: String!
  description: String!
}

type PigMortalityEvent {
  code: String!
  description: String!
  reasons: [Reason!]!
}

type PriceEntry {
  animal: String!
  price: Float
}

type PigQuantity {
  code: String!
  quantity: Int
}

input PigQuantityInput {
  code: String!
  quantity: Int!
}

input PigOptionalQuantityInput {
  code: String!
  quantity: Int
}


type PigAdjustment {
  event: PigAdjustmentEvent
  postingDate: String
  job: Job!
  quantity: Int
  totalWeight: Float
  comments: String
}

input PostPigAdjustmentInput {
  event: String!
  postingDate: String!
  job: String!
  quantity: Int!
  totalWeight: Float!
  comments: String
}

input SavePigAdjustmentInput {
  event: String!
  postingDate: String
  job: String!
  quantity: Int
  totalWeight: Float
  comments: String
}

type PigAdjustmentResult  {
  success: Boolean!
  pigAdjustment: PigAdjustment!
  defaults: PigActivityDefaults!
}


type PigGradeOff {
  event: PigGradeOffEvent
  postingDate: String
  job: Job!
  quantities: [PigQuantity!]!
  pigWeight: Float
  comments: String
}

input PostPigGradeOffInput {
  event: String!
  postingDate: String!
  job: String!
  quantities: [PigQuantityInput!]!
  pigWeight: Float!
  comments: String
}

input SavePigGradeOffInput {
  event: String
  postingDate: String
  job: String!
  quantities: [PigOptionalQuantityInput!]
  pigWeight: Float
  comments: String
}

type PigGradeOffResult {
  success: Boolean!
  pigGradeOff: PigGradeOff!
  defaults: PigActivityDefaults!
}


type PigMortality {
  event: PigMortalityEvent
  postingDate: String
  job: Job!
  quantities: [PigQuantity!]
  comments: String
}

input PostPigMortalityInput {
  event: String!
  postingDate: String!
  job: String!
  quantities: [PigQuantityInput!]
  comments: String
}

input SavePigMortalityInput {
  event: String
  postingDate: String
  job: String!
  quantities: [PigOptionalQuantityInput!]
  comments: String
}

type PigMortalityResult {
  success: Boolean!
  pigMortality: PigMortality!
  defaults: PigActivityDefaults!
}


type PigMove {
  event: PigMoveEvent
  postingDate: String
  fromJob: Job!
  toJob: Job
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

input PostPigMoveInput {
  event: String!
  postingDate: String!
  fromJob: String!
  toJob: String!
  quantity: Int!
  smallPigQuantity: Int
  totalWeight: Float!
  comments: String
}

input SavePigMoveInput {
  event: String
  postingDate: String
  fromJob: String!
  toJob: String
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

type PigMoveResult {
  success: Boolean!
  pigMove: PigMove!
  defaults: PigActivityDefaults!
}


type PigPurchase {
  event: PigPurchaseEvent
  postingDate: String
  job: Job!
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

input PostPigPurchaseInput {
  event: String!
  postingDate: String!
  job: String!
  quantity: Int!
  smallPigQuantity: Int
  totalWeight: Float!
  comments: String
}

input SavePigPurchaseInput {
  event: String!
  postingDate: String
  job: String!
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

type PigPurchaseResult {
  success: Boolean!
  pigPurchase: PigPurchase!
  defaults: PigActivityDefaults!
}

type PigWean {
  event: PigWeanEvent
  postingDate: String
  job: Job!
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

input PostPigWeanInput {
  event: String!
  postingDate: String!
  job: String!
  quantity: Int!
  smallPigQuantity: Int
  totalWeight: Float!
  comments: String
}

input SavePigWeanInput {
  event: String
  postingDate: String
  job: String!
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

type PigWeanResult {
  success: Boolean!
  pigWean: PigWean!
  defaults: PigActivityDefaults!
}


type Query {
  animals: [Item!]!
  pigActivityJobs: [Job!]!
  pigActivityDefaults: PigActivityDefaults!
  pigAdjustment(job: String!): PigAdjustment!
  pigGradeOff(job: String!): PigGradeOff!
  pigGradeOffEventTypes: [PigGradeOffEvent!]!
  pigMortality(job: String!): PigMortality!
  pigMove(job: String!): PigMove!
  pigMoveEventTypes: [PigMoveEvent!]!
  pigPurchase(job: String!): PigPurchase!
  pigWean(job: String!): PigWean!
  pigWeanEventTypes: [PigWeanEvent!]!
  pigPurchaseEventTypes: [PigPurchaseEvent!]!
  pigAdjustmentEventTypes: [PigAdjustmentEvent!]!
  pigMortalityEventTypes: [PigMortalityEvent!]!
}

type Mutation {
  postPigAdjustment(input: PostPigAdjustmentInput!): PigAdjustmentResult!
  savePigAdjustment(input: SavePigAdjustmentInput!): PigAdjustmentResult!
  postPigGradeOff(input: PostPigGradeOffInput!): PigGradeOffResult!
  savePigGradeOff(input: SavePigGradeOffInput!): PigGradeOffResult!
  postPigMortality(input: PostPigMortalityInput!): PigMortalityResult!
  savePigMortality(input: SavePigMortalityInput!): PigMortalityResult!
  postPigMove(input: PostPigMoveInput!): PigMoveResult!
  savePigMove(input: SavePigMoveInput!): PigMoveResult!
  postPigPurchase(input: PostPigPurchaseInput!): PigPurchaseResult!
  savePigPurchase(input: SavePigPurchaseInput!): PigPurchaseResult!
  postPigWean(input: PostPigWeanInput!): PigWeanResult!
  savePigWean(input: SavePigWeanInput!): PigWeanResult!
}