enum InclusivityMode {
  INCLUDE
  EXCLUDE
}

type Job {
  number: String!
  description: String!
  personResponsible: Resource!
  inventory: Int
  deadQuantity: Int
  location: Location!
}

type Item {
  number: String!
  description: String!
}

type Reason {
  code: String!
  description: String!
}

type Resource {
  number: String!
  name: String!
}

type Location {
  code: String!
  name: String!
}

input JobFilter {
  groups: [String!]
  locations: [String!]
}

input ResourceFilter {
  group: String
  type: String
}

type Query {
  animals: [Item!]!
  farrowingBackendArea(number: String!): Job
  farrowingBackendAreas: [Job!]!
  farrowingBackendOperators: [Resource!]!
  farrowingBackendScorecard(area: String!): FarrowingBackendScorecard
  growFinishJobs: [Job!]!
  job(number: String!): Job
  jobs(input: JobFilter): [Job!]!
  locations: [Location!]!
  personResponsible: [Resource!]!
  pigActivityDefaults: PigActivityDefaults!
  pigActivityJobs: [Job!]!
  pigAdjustment(job: String!): PigAdjustment!
  pigAdjustmentEventTypes: [PigAdjustmentEvent!]!
  pigGradeOff(job: String!): PigGradeOff!
  pigGradeOffEventTypes: [PigGradeOffEvent!]!
  pigMortality(job: String!): PigMortality!
  pigMortalityEventTypes: [PigMortalityEvent!]!
  pigMove(job: String!): PigMove!
  pigMoveEventTypes: [PigMoveEvent!]!
  pigPurchase(job: String!): PigPurchase!
  pigPurchaseEventTypes: [PigPurchaseEvent!]!
  pigWean(job: String!): PigWean!
  pigWeanEventTypes: [PigWeanEvent!]!
  resource(code: String!): Resource
  resources(input: ResourceFilter): [Resource!]!
  scorecard(job: String!): Scorecard
  scorecardPages(job: String!): [ScorecardPage!]!
  user: User
}

type PigActivityDefaults {
  job: Job
  prices: [PriceEntry!]!
}

type PigWeanEvent {
  code: String!
  description: String!
}

type PigGradeOffEvent {
  code: String!
  description: String!
  reasons: [Reason!]!
}

type PigMoveEvent {
  code: String!
  description: String!
}

type PigPurchaseEvent {
  code: String!
  description: String!
}

type PigAdjustmentEvent {
  code: String!
  description: String!
}

type PigMortalityEvent {
  code: String!
  description: String!
  reasons: [Reason!]!
}

type PriceEntry {
  animal: String!
  price: Float
}

type PigQuantity {
  code: String!
  quantity: Int
}

input PigQuantityInput {
  code: String!
  quantity: Int!
}

input PigOptionalQuantityInput {
  code: String!
  quantity: Int
}

type PigAdjustment {
  event: PigAdjustmentEvent
  job: Job!
  quantity: Int
  totalWeight: Float
  comments: String
}

input PostPigAdjustmentInput {
  event: String!
  job: String!
  quantity: Int!
  totalWeight: Float!
  comments: String
}

input SavePigAdjustmentInput {
  event: String!
  job: String!
  quantity: Int
  totalWeight: Float
  comments: String
}

type PigAdjustmentResult {
  success: Boolean!
  pigAdjustment: PigAdjustment!
  defaults: PigActivityDefaults!
}

type PigGradeOff {
  event: PigGradeOffEvent
  job: Job!
  quantities: [PigQuantity!]!
  pigWeight: Float
  comments: String
}

input PostPigGradeOffInput {
  event: String!
  job: String!
  quantities: [PigQuantityInput!]!
  pigWeight: Float!
  comments: String
}

input SavePigGradeOffInput {
  event: String
  job: String!
  quantities: [PigOptionalQuantityInput!]
  pigWeight: Float
  comments: String
}

type PigGradeOffResult {
  success: Boolean!
  pigGradeOff: PigGradeOff!
  defaults: PigActivityDefaults!
}

type PigMortality {
  event: PigMortalityEvent
  job: Job!
  quantities: [PigQuantity!]
  comments: String
}

input PostPigMortalityInput {
  event: String!
  job: String!
  quantities: [PigQuantityInput!]
  comments: String
}

input SavePigMortalityInput {
  event: String
  job: String!
  quantities: [PigOptionalQuantityInput!]
  comments: String
}

type PigMortalityResult {
  success: Boolean!
  pigMortality: PigMortality!
  defaults: PigActivityDefaults!
}

type PigMove {
  event: PigMoveEvent
  fromJob: Job!
  toJob: Job
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

input PostPigMoveInput {
  event: String!
  fromJob: String!
  toJob: String!
  quantity: Int!
  smallPigQuantity: Int
  totalWeight: Float!
  comments: String
}

input SavePigMoveInput {
  event: String
  fromJob: String!
  toJob: String
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

type PigMoveResult {
  success: Boolean!
  pigMove: PigMove!
  defaults: PigActivityDefaults!
}

type PigPurchase {
  event: PigPurchaseEvent
  job: Job!
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

input PostPigPurchaseInput {
  event: String!
  job: String!
  quantity: Int!
  smallPigQuantity: Int
  totalWeight: Float!
  comments: String
}

input SavePigPurchaseInput {
  event: String!
  job: String!
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

type PigPurchaseResult {
  success: Boolean!
  pigPurchase: PigPurchase!
  defaults: PigActivityDefaults!
}

type PigWean {
  event: PigWeanEvent
  job: Job!
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

input PostPigWeanInput {
  event: String!
  job: String!
  quantity: Int!
  smallPigQuantity: Int
  totalWeight: Float!
  comments: String
}

input SavePigWeanInput {
  event: String
  job: String!
  quantity: Int
  smallPigQuantity: Int
  totalWeight: Float
  comments: String
}

type PigWeanResult {
  success: Boolean!
  pigWean: PigWean!
  defaults: PigActivityDefaults!
}

type Mutation {
  login(input: LoginInput!): LoginResult!
  logout: LogoutResult!
  postFarrowingBackendScorecard(input: PostFarrowingBackendScorecardInput!): FarrowingBackendScorecardResult!
  postPigAdjustment(input: PostPigAdjustmentInput!): PigAdjustmentResult!
  postPigGradeOff(input: PostPigGradeOffInput!): PigGradeOffResult!
  postPigMortality(input: PostPigMortalityInput!): PigMortalityResult!
  postPigMove(input: PostPigMoveInput!): PigMoveResult!
  postPigPurchase(input: PostPigPurchaseInput!): PigPurchaseResult!
  postPigWean(input: PostPigWeanInput!): PigWeanResult!
  postScorecard(input: PostScorecardInput!): ScorecardResult!
  saveFarrowingBackendScorecard(input: SaveFarrowingBackendScorecardInput!): FarrowingBackendScorecardResult!
  savePigAdjustment(input: SavePigAdjustmentInput!): PigAdjustmentResult!
  savePigGradeOff(input: SavePigGradeOffInput!): PigGradeOffResult!
  savePigMortality(input: SavePigMortalityInput!): PigMortalityResult!
  savePigMove(input: SavePigMoveInput!): PigMoveResult!
  savePigPurchase(input: SavePigPurchaseInput!): PigPurchaseResult!
  savePigWean(input: SavePigWeanInput!): PigWeanResult!
  saveScorecard(input: PostScorecardInput!): ScorecardResult!
  setAreaOperator(input: SetAreaOperatorInput!): SetAreaOperatorResult!
  updateUserLocations(input: UpdateUserLocationsInput!): UpdateUserLocationsResult!
}

type ScorecardEntry {
  score: Int
  comments: String
}

input ScorecardEntryInput {
  score: Int!
  comments: String
}

type FarrowingBackendScorecard {
  area: Job!
  operator: Resource
  sows: ScorecardEntry!
  piglets: ScorecardEntry!
  feed: ScorecardEntry!
  water: ScorecardEntry!
  crate: ScorecardEntry!
  room: ScorecardEntry!
}

input PostFarrowingBackendScorecardInput {
  area: String!
  operator: String!
  sows: ScorecardEntryInput!
  piglets: ScorecardEntryInput!
  feed: ScorecardEntryInput!
  water: ScorecardEntryInput!
  crate: ScorecardEntryInput!
  room: ScorecardEntryInput!
}

input SaveFarrowingBackendScorecardInput {
  area: String!
  operator: String
  sows: ScorecardEntryInput
  piglets: ScorecardEntryInput
  feed: ScorecardEntryInput
  water: ScorecardEntryInput
  crate: ScorecardEntryInput
  room: ScorecardEntryInput
}

type FarrowingBackendScorecardResult {
  success: Boolean!
  scorecard: FarrowingBackendScorecard!
}

type ScorecardElement {
  id: ID!
  label: String!
  code: String!
  order: Int!
}

type ScorecardPage {
  title: String
  elements: [ScorecardElement!]!
}

type ScorecardJob {
  number: String!
  personResponsible: String!
}

input ScorecardElementResponseInput {
  elementId: ID!
  numericValue: Float
  stringValue: String
}

input PostScorecardInput {
  job: String!
  data: [ScorecardElementResponseInput!]!
}

type ScorecardResult {
  success: Boolean!
  scorecard: Scorecard!
}

type ScorecardElementResponse {
  elementId: ID!
  numericValue: Float
  stringValue: String
}

type Scorecard {
  job: Job!
  data: [ScorecardElementResponse!]!
}

input SetAreaOperatorInput {
  area: String!
  operator: String!
}

type SetAreaOperatorResult {
  success: Boolean!
  area: Job!
}

type UserLocations {
  mode: InclusivityMode!
  list: [Location!]!
}

type User {
  username: String!
  license: String!
  name: String!
  locations: UserLocations!
}

input LoginInput {
  username: String!
  password: String!
}

type LoginResult {
  success: Boolean!
  user: User!
}

type LogoutResult {
  success: Boolean!
}

input UpdateUserLocationsInput {
  add: [String!]
  remove: [String!]
  mode: InclusivityMode
}

type UpdateUserLocationsResult {
  success: Boolean!
  locations: UserLocations!
}
