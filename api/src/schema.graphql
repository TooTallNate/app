enum InclusivityMode {
  INCLUDE
  EXCLUDE
}

type Job {
  number: String!
  description: String!
  personResponsible: Resource!
  inventory: Float
  deadQuantity: Float
  startDate: String
  groupStartDate: String
  location: Location!
  projectManager: User
}

type Item {
  number: String!
  description: String!
  cost: Int
}

type Reason {
  code: String!
  description: String!
}

type Resource {
  number: String!
  name: String!
  unitPrice: Float
}

type Location {
  code: String!
  name: String!
}

input JobFilter {
  groups: [String!]
  locations: [String!]
}

input ResourceFilter {
  group: String
  type: String
}

type Query {
  animals: [Item!]!
  fuelAsset(number: String!): FuelAsset
  fuelAssets: [FuelAsset!]!
  fuelHistoryAsset(number: String!): [FuelHistoryAsset!]!
  item(number: String!): Item
  itemJournalTemplates: [ItemJournalTemplate!]
  job(number: String!): Job
  jobs(input: JobFilter): [Job!]!
  livestockActivityDefaults: LivestockActivityDefaults!
  livestockActivityJobs: [Job!]!
  livestockAdjustment(job: String!): LivestockAdjustment!
  livestockAdjustmentEventTypes: [LivestockAdjustmentEvent!]!
  livestockGradeOff(job: String!): LivestockGradeOff!
  livestockGradeOffEventTypes: [LivestockGradeOffEvent!]!
  livestockJob(number: String!): Job
  livestockJobs(input: JobFilter): [Job!]!
  livestockMortality(job: String!): LivestockMortality!
  livestockMortalityEventTypes: [LivestockMortalityEvent!]!
  livestockMove(job: String!): LivestockMove!
  livestockMoveEventTypes: [LivestockMoveEvent!]!
  livestockPurchase(job: String!): LivestockPurchase!
  livestockPurchaseEventTypes: [LivestockPurchaseEvent!]!
  livestockWean(job: String!): LivestockWean!
  livestockWeanEventTypes: [LivestockWeanEvent!]!
  locations: [Location!]!
  maintenanceAsset(number: String!): MaintenanceAsset
  maintenanceAssets: [MaintenanceAsset!]!
  maintenanceAssetsByNo(assetNo: String!): [MaintenanceAsset!]!
  maintenanceHistoryAsset(number: String!): [MaintenanceHistoryAsset!]!
  resource(code: String!): Resource
  resources(input: ResourceFilter): [Resource!]!
  scorecard(job: String!): Scorecard
  scorecardConfig(job: String!): ScorecardConfig
  scorecardGroups: [ScorecardGroup!]!
  user: User
  users: [User!]!
}

type FuelAsset {
  number: String!
  code: String!
  description: String!
  fuelType: String!
  fuelCost: Float!
  unitOfMeasureCode: String!
}

type FuelHistoryAsset {
  entry: Int!
  number: String!
  amount: Float!
  maintenanceCode: String!
  reasonCode: String!
  postingDate: String!
  quantity: Int!
  description: String!
  meta: Int!
}

input PostFuelInput {
  asset: String!
  postingDate: String
  gallons: Float!
  mileage: Float!
  comments: String
}

type FuelResult {
  success: Boolean!
}

type Mutation {
  login(input: LoginInput!): LoginResult!
  logout: LogoutResult!
  postFuel(input: PostFuelInput!): FuelResult!
  postLivestockAdjustment(input: PostLivestockAdjustmentInput!): LivestockAdjustmentResult!
  postLivestockGradeOff(input: PostLivestockGradeOffInput!): LivestockGradeOffResult!
  postLivestockMortality(input: PostLivestockMortalityInput!): LivestockMortalityResult!
  postLivestockMove(input: PostLivestockMoveInput!): LivestockMoveResult!
  postLivestockPurchase(input: PostLivestockPurchaseInput!): LivestockPurchaseResult!
  postLivestockWean(input: PostLivestockWeanInput!): LivestockWeanResult!
  postMaintenance(input: PostMaintenanceInput!): MaintenanceResult!
  postScorecard(input: PostScorecardInput!): ScorecardResult!
  saveLivestockAdjustment(input: SaveLivestockAdjustmentInput!): LivestockAdjustmentResult!
  saveLivestockGradeOff(input: SaveLivestockGradeOffInput!): LivestockGradeOffResult!
  saveLivestockMortality(input: SaveLivestockMortalityInput!): LivestockMortalityResult!
  saveLivestockMove(input: SaveLivestockMoveInput!): LivestockMoveResult!
  saveLivestockPurchase(input: SaveLivestockPurchaseInput!): LivestockPurchaseResult!
  saveLivestockWean(input: SaveLivestockWeanInput!): LivestockWeanResult!
  saveScorecard(input: PostScorecardInput!): ScorecardResult!
  updateUserLocations(input: UpdateUserLocationsInput!): UpdateUserLocationsResult!
}

type LivestockActivityDefaults {
  job: Job
  prices: [PriceEntry!]!
}

type LivestockWeanEvent {
  code: String!
  description: String!
}

type LivestockGradeOffEvent {
  code: String!
  description: String!
  reasons: [Reason!]!
}

type LivestockMoveEvent {
  code: String!
  description: String!
}

type LivestockPurchaseEvent {
  code: String!
  description: String!
}

type LivestockAdjustmentEvent {
  code: String!
  description: String!
}

type LivestockMortalityEvent {
  code: String!
  description: String!
  reasons: [Reason!]!
}

type PriceEntry {
  animal: String!
  price: Float
}

type LivestockQuantity {
  code: String!
  quantity: Int
}

input LivestockQuantityInput {
  code: String!
  quantity: Int!
}

input LivestockOptionalQuantityInput {
  code: String!
  quantity: Int
}

type LivestockAdjustment {
  event: LivestockAdjustmentEvent
  postingDate: String
  job: Job!
  quantity: Int
  totalWeight: Float
  comments: String
}

input PostLivestockAdjustmentInput {
  event: String!
  postingDate: String
  job: String!
  quantity: Int!
  totalWeight: Float!
  comments: String
}

input SaveLivestockAdjustmentInput {
  event: String!
  postingDate: String
  job: String!
  quantity: Int
  totalWeight: Float
  comments: String
}

type LivestockAdjustmentResult {
  success: Boolean!
  livestockAdjustment: LivestockAdjustment!
  defaults: LivestockActivityDefaults!
}

type LivestockGradeOff {
  event: LivestockGradeOffEvent
  postingDate: String
  job: Job!
  quantities: [LivestockQuantity!]!
  livestockWeight: Float
  comments: String
}

input PostLivestockGradeOffInput {
  event: String!
  postingDate: String
  job: String!
  quantities: [LivestockQuantityInput!]!
  livestockWeight: Float!
  comments: String
}

input SaveLivestockGradeOffInput {
  event: String
  postingDate: String
  job: String!
  quantities: [LivestockOptionalQuantityInput!]
  livestockWeight: Float
  comments: String
}

type LivestockGradeOffResult {
  success: Boolean!
  livestockGradeOff: LivestockGradeOff!
  defaults: LivestockActivityDefaults!
}

type LivestockMortality {
  event: LivestockMortalityEvent
  postingDate: String
  job: Job!
  quantities: [LivestockQuantity!]
  comments: String
}

input PostLivestockMortalityInput {
  event: String!
  postingDate: String
  job: String!
  quantities: [LivestockQuantityInput!]
  comments: String
}

input SaveLivestockMortalityInput {
  event: String
  postingDate: String
  job: String!
  quantities: [LivestockOptionalQuantityInput!]
  comments: String
}

type LivestockMortalityResult {
  success: Boolean!
  livestockMortality: LivestockMortality!
  defaults: LivestockActivityDefaults!
}

type LivestockMove {
  event: LivestockMoveEvent
  postingDate: String
  fromJob: Job!
  toJob: Job
  quantity: Int
  smallLivestockQuantity: Int
  totalWeight: Float
  comments: String
}

input PostLivestockMoveInput {
  event: String!
  postingDate: String
  fromJob: String!
  toJob: String!
  quantity: Int!
  smallLivestockQuantity: Int
  totalWeight: Float!
  comments: String
}

input SaveLivestockMoveInput {
  event: String
  postingDate: String
  fromJob: String!
  toJob: String
  quantity: Int
  smallLivestockQuantity: Int
  totalWeight: Float
  comments: String
}

type LivestockMoveResult {
  success: Boolean!
  livestockMove: LivestockMove!
  defaults: LivestockActivityDefaults!
}

type LivestockPurchase {
  event: LivestockPurchaseEvent
  postingDate: String
  job: Job!
  quantity: Int
  smallLivestockQuantity: Int
  totalWeight: Float
  comments: String
}

input PostLivestockPurchaseInput {
  event: String!
  postingDate: String
  job: String!
  quantity: Int!
  smallLivestockQuantity: Int
  totalWeight: Float!
  comments: String
}

input SaveLivestockPurchaseInput {
  event: String!
  postingDate: String
  job: String!
  quantity: Int
  smallLivestockQuantity: Int
  totalWeight: Float
  comments: String
}

type LivestockPurchaseResult {
  success: Boolean!
  livestockPurchase: LivestockPurchase!
  defaults: LivestockActivityDefaults!
}

type LivestockWean {
  event: LivestockWeanEvent
  postingDate: String
  job: Job!
  quantity: Int
  smallLivestockQuantity: Int
  totalWeight: Float
  comments: String
}

input PostLivestockWeanInput {
  event: String!
  postingDate: String
  job: String!
  quantity: Int!
  smallLivestockQuantity: Int
  totalWeight: Float!
  comments: String
}

input SaveLivestockWeanInput {
  event: String
  postingDate: String
  job: String!
  quantity: Int
  smallLivestockQuantity: Int
  totalWeight: Float
  comments: String
}

type LivestockWeanResult {
  success: Boolean!
  livestockWean: LivestockWean!
  defaults: LivestockActivityDefaults!
}

type ItemJournalTemplate {
  name: String!
  description: String!
  type: String!
  sourceCode: String!
  reasonCode: String!
}

type MaintenanceAsset {
  number: String!
  description: String
  classCode: String
  code: String!
  interval: Int
  unitType: String
  maintenanceDesc: String
}

type MaintenanceHistoryAsset {
  entry: Int!
  number: String!
  amount: Float!
  maintenanceCode: String!
  reasonCode: String!
  postingDate: String!
  quantity: Int!
  description: String!
  meta: Int!
}

input PostMaintenanceInput {
  asset: String!
  postingDate: String
  type: String!
  mileage: Float
  workHours: Float!
  totalCost: Float
  comments: String
}

type MaintenanceResult {
  success: Boolean!
}

type ScorecardGroup {
  code: String!
  description: String!
}

type ScorecardElement {
  id: ID!
  label: String!
  code: String!
  order: Int!
}

type ScorecardPage {
  title: String
  elements: [ScorecardElement!]!
}

type ScorecardConfig {
  job: Job!
  pages: [ScorecardPage!]!
}

input ScorecardElementResponseInput {
  elementId: ID!
  numericValue: Float
  stringValue: String
}

input PostScorecardInput {
  job: String!
  data: [ScorecardElementResponseInput!]!
}

type ScorecardResult {
  success: Boolean!
  scorecard: Scorecard
}

type ScorecardElementResponse {
  elementId: ID!
  numericValue: Float
  stringValue: String
}

type Scorecard {
  job: Job!
  data: [ScorecardElementResponse!]!
}

type UserLocations {
  mode: InclusivityMode!
  list: [Location!]!
}

type User {
  username: String!
  license: String!
  name: String!
  locations: UserLocations!
}

input LoginInput {
  username: String!
  password: String!
}

type LoginResult {
  success: Boolean!
  user: User!
}

type LogoutResult {
  success: Boolean!
}

input UpdateUserLocationsInput {
  add: [String!]
  remove: [String!]
  mode: InclusivityMode
}

type UpdateUserLocationsResult {
  success: Boolean!
  locations: UserLocations!
}
