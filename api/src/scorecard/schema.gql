type ScorecardEntry {
  score: Int
  comments: String
}

input ScorecardEntryInput {
  score: Int!
  comments: String
}


type FarrowingBackendScorecard {
  area: Job!
  operator: Resource
  sows: ScorecardEntry!
  piglets: ScorecardEntry!
  feed: ScorecardEntry!
  water: ScorecardEntry!
  crate: ScorecardEntry!
  room: ScorecardEntry!
}


input PostFarrowingBackendScorecardInput {
  area: String!
  operator: String!
  sows: ScorecardEntryInput!
  piglets: ScorecardEntryInput!
  feed: ScorecardEntryInput!
  water: ScorecardEntryInput!
  crate: ScorecardEntryInput!
  room: ScorecardEntryInput!
}

input SaveFarrowingBackendScorecardInput {
  area: String!
  operator: String
  sows: ScorecardEntryInput
  piglets: ScorecardEntryInput
  feed: ScorecardEntryInput
  water: ScorecardEntryInput
  crate: ScorecardEntryInput
  room: ScorecardEntryInput
}

type FarrowingBackendScorecardResult {
  success: Boolean!
  scorecard: FarrowingBackendScorecard!
}

input PostGrowFinishScorecardInput {
  area: String!
  operator: String!
  sows: ScorecardEntryInput!
  piglets: ScorecardEntryInput!
  feed: ScorecardEntryInput!
  water: ScorecardEntryInput!
  crate: ScorecardEntryInput!
  room: ScorecardEntryInput!
}

input SaveGrowFinishInput {
  area: String!
  operator: String
  sows: ScorecardEntryInput
  piglets: ScorecardEntryInput
  feed: ScorecardEntryInput
  water: ScorecardEntryInput
  crate: ScorecardEntryInput
  room: ScorecardEntryInput
}

type GrowFinishScorecardResult {
  success: Boolean!
  scorecard: FarrowingBackendScorecard!
}


input SetAreaOperatorInput {
  area: String!
  operator: String!
}

type SetAreaOperatorResult {
  success: Boolean!
  area: Job!
}



type Query {
  farrowingBackendScorecard(area: String!): FarrowingBackendScorecard
  farrowingBackendAreas: [Job!]!
  farrowingBackendArea(number: String!): Job
  farrowingBackendOperators: [Resource!]!
  growFinishJobs: [Job!]!
  personResponsible: [Resource!]!
}

type Mutation {
  setAreaOperator(input: SetAreaOperatorInput!): SetAreaOperatorResult!
  postFarrowingBackendScorecard(input: PostFarrowingBackendScorecardInput!): FarrowingBackendScorecardResult!
  saveFarrowingBackendScorecard(input: SaveFarrowingBackendScorecardInput!): FarrowingBackendScorecardResult!
  # postGrowFinishScorecard(input: PostGrowFinishScorecardInput!): GrowFinishScorecardResult!
  saveGrowFinishScorecard(input: SaveGrowFinishScorecardInput!): GrowFinishScorecardResult!
}
