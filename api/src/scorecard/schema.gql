type ScorecardEntry {
  score: Int
  comments: String
}

input ScorecardEntryInput {
  score: Int!
  comments: String
}


type FarrowingBackendScorecard {
  area: Job!
  operator: Resource
  sows: ScorecardEntry!
  piglets: ScorecardEntry!
  feed: ScorecardEntry!
  water: ScorecardEntry!
  crate: ScorecardEntry!
  room: ScorecardEntry!
}


input PostFarrowingBackendScorecardInput {
  area: String!
  operator: String!
  sows: ScorecardEntryInput!
  piglets: ScorecardEntryInput!
  feed: ScorecardEntryInput!
  water: ScorecardEntryInput!
  crate: ScorecardEntryInput!
  room: ScorecardEntryInput!
}

input SaveFarrowingBackendScorecardInput {
  area: String!
  operator: String
  sows: ScorecardEntryInput
  piglets: ScorecardEntryInput
  feed: ScorecardEntryInput
  water: ScorecardEntryInput
  crate: ScorecardEntryInput
  room: ScorecardEntryInput
}

type FarrowingBackendScorecardResult {
  success: Boolean!
  scorecard: FarrowingBackendScorecard!
}

# type GrowFinishScorecard {
#   job: Job!
#   operator: Resource
# }

# input PostGrowFinishScorecardInput {
#   job: String!
#   operator: String!
# }

# input SaveGrowFinishScorecardInput {
#   job: String!
#   operator: String
# }

# type GrowFinishScorecardResult {
#   success: Boolean!
#   scorecard: GrowFinishScorecard!
# }

input PostScorecardInput {
  job: String!
  operator: String!
}

input SaveScorecardInput {
  job: String!
  operator: String
}

type ScorecardResult {
  success: Boolean!
  scorecard: Scorecard!
}

type Scorecard {
  job: Job!
  date: String
  
  operator: Resource
  # pages
  # data
}


input SetAreaOperatorInput {
  area: String!
  operator: String!
}

type SetAreaOperatorResult {
  success: Boolean!
  area: Job!
}

type Query {
  farrowingBackendScorecard(area: String!): FarrowingBackendScorecard
  farrowingBackendAreas: [Job!]!
  farrowingBackendArea(number: String!): Job
  farrowingBackendOperators: [Resource!]!
  # remove this when common is working
  growFinishJobs: [Job!]!
  personResponsible: [Resource!]!


  scorecard(job: String!): Scorecard
}

type Mutation {
  setAreaOperator(input: SetAreaOperatorInput!): SetAreaOperatorResult!
  postFarrowingBackendScorecard(input: PostFarrowingBackendScorecardInput!): FarrowingBackendScorecardResult!
  saveFarrowingBackendScorecard(input: SaveFarrowingBackendScorecardInput!): FarrowingBackendScorecardResult!
  saveScorecard(input: SaveScorecardInput!): ScorecardResult!
  # add this when we get to post
  # postScoreCard(input: PostScorecardInput!): ScorecardResult!

}
